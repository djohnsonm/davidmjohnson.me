<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[david m. johnson]]></title>
  <link href="http://davidmjohnson.me/atom.xml" rel="self"/>
  <link href="http://davidmjohnson.me/"/>
  <updated>2012-08-23T03:26:58-05:00</updated>
  <id>http://davidmjohnson.me/</id>
  <author>
    <name><![CDATA[david m. johnson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[First post on new blog]]></title>
    <link href="http://davidmjohnson.me/blog/2012/08/17/first-post-on-new-blog/"/>
    <updated>2012-08-17T13:11:00-05:00</updated>
    <id>http://davidmjohnson.me/blog/2012/08/17/first-post-on-new-blog</id>
    <content type="html"><![CDATA[<p>Welcome to the home of my new blog. I&#8217;ll be updating it shortly with better themes, migrated posts and pics</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roll your own Twitter Feed with Backbone.js]]></title>
    <link href="http://davidmjohnson.me/blog/2012/05/12/roll-your-own-twitter-feed-with-backbone-dot-js/"/>
    <updated>2012-05-12T09:51:00-05:00</updated>
    <id>http://davidmjohnson.me/blog/2012/05/12/roll-your-own-twitter-feed-with-backbone-dot-js</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropbox.com/u/10021156/blog/Capture.png"></p>

<p>Backbone.js is a JavaScript framework that manages complexity on the client while enabling the creation of rich HTML5 applications in a MVC-style fashion. For the more tech-savvy:</p>

<blockquote><p>Backbone.js gives structure to web applications by providing models with key-value binding and custom events, collections with a rich API of enumerable functions, views with declarative event handling, and connects it all to your existing API over a RESTful JSON interface. Created by THE Jeremy Ashkenas of Document Cloud (creator of CoffeeScript – more on that later).</p></blockquote>


<h2>Setting the stage</h2>

<p>In this post we’re going to make our own sample Backbone.js app that utilizes Twitter’s search API to scrape tweets and display them with the underscore templating engine and twitter bootstrap themes with a subtle patterns background. Node.js will deliver our static html file while Dropbox will host our JavaScript files (providing us with a make-shift CDN “Content Delivery Network”). Our app will be hosted on www.cloudfoundry.com with www.c9.io as our staging server while using git as our source control.</p>

<h2>Final Result</h2>

<p>Usually with tutorials I scroll to the bottom to see if the example is even worth making, then I decide to read the post if it is. So let me save you the trouble of scrolling and just show the final result here. <iframe src="http://ghbtns.com/github-btn.html?user=djohnsonm&repo=Twitter-Feed&type=fork&count=true"
  allowtransparency="true" frameborder="0" scrolling="0" width="95px" height="20px"></iframe></p>

<p><img src="https://dl.dropbox.com/u/10021156/blog/ff.png"></p>

<h2>Setting up our server</h2>

<p>For those of you that don’t know node.js like me. It’s worth checking out and is compatible on all major operating systems. According to node’s site.</p>

<blockquote><p>Node.js is a platform built on Chrome’s JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.</p></blockquote>


<p>Some users of node are Microsoft, LinkedIn, eBay and Voxer.</p>

<p>For more info on getting started with node, express and npm (node package manager) check out this tutorial. For more info on what exactly node is, check out this link. There are also plenty of other great ebooks on Amazon.</p>

<p>If you’re coming from the Microsoft paradigm think of express as your ASP.NET MVC 3 web app framework. For our example we are only distributing one html file (since our app is a simple single-page app) that needs no server interaction. The code should be very straightforward.</p>

<figure class='code'><figcaption><span>Node.js app</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Configuration</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">configure</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// disable layout</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;view options&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">layout</span><span class="o">:</span> <span class="kc">false</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// make a custom html template</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="s1">&#39;.html&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">compile</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">options</span><span class="p">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">locals</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">str</span><span class="p">;</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">configure</span><span class="p">(</span><span class="s1">&#39;development&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">errorHandler</span><span class="p">({</span> <span class="nx">dumpExceptions</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">showStack</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">configure</span><span class="p">(</span><span class="s1">&#39;production&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">errorHandler</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s2">&quot;index.html&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Express server listening on port %d in %s mode&quot;</span><span class="p">,</span> <span class="nx">app</span><span class="p">.</span><span class="nx">address</span><span class="p">().</span><span class="nx">port</span><span class="p">,</span> <span class="nx">app</span><span class="p">.</span><span class="nx">settings</span><span class="p">.</span><span class="nx">env</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The Html</h2>

<p><img src="https://dl.dropbox.com/u/10021156/blog/hbp-1.png"></p>

<p>Main highlights here are as follows:</p>

<p>HTML5 boilerplate goodness
Underscore.js Templating
Using a CDN to shorten the load time of your scripts
Easy styling with Twitter Bootstrappin’</p>

<p><img src="https://dl.dropbox.com/u/10021156/blog/bs.png"></p>

<p>Here we see by appending classes to div’s twitter bootstrap will easily create a persistent header with optional header text.</p>

<figure class='code'><figcaption><span>Twitter BootStrap Styles </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;header&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;navbar navbar-fixed-top&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;navbar-inner&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container-fluid&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;brand&quot;</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Clarity Twitter Feed<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>          <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;nav-collapse collapse&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/header&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://dl.dropbox.com/u/10021156/blog/u.png"></p>

<p>Here in our tweet template we iterate through each tweet and display the respective content in tags and append the image url onto the “src” attribute of an tag.</p>

<figure class='code'><figcaption><span>Underscore.js style application </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/template&quot;</span> <span class="na">id=</span><span class="s">&quot;tweettemplate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!--</span> <span class="nx">nav</span> <span class="o">--&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">nav</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;refresh btn btn-success btn-large&quot;</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nx">i</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;icon-white icon-refresh&quot;</span><span class="o">&gt;&lt;</span><span class="err">/i&gt;Refresh</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;reverse btn btn-warning btn-large&quot;</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nx">i</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;icon-white icon-resize-vertical&quot;</span><span class="o">&gt;&lt;</span><span class="err">/i&gt;Reverse</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/nav&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--</span> <span class="o">/</span><span class="nx">nav</span> <span class="o">--&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!--</span> <span class="nx">List</span> <span class="nx">of</span> <span class="nx">Tweets</span> <span class="o">--&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">section</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;content&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;tweetList&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>          <span class="o">&lt;%</span> <span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">tweets</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">tweet</span><span class="p">)</span> <span class="p">{</span> <span class="o">%&gt;</span>
</span><span class='line'>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">li</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;tweet&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">span</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;head&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                    <span class="o">&lt;</span><span class="nx">img</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;pic&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;&lt;%= tweet.profile_image_url %&gt;&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>                    <span class="o">&lt;</span><span class="nx">p</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;userId&quot;</span><span class="o">&gt;&lt;%=</span> <span class="s2">&quot;@&quot;</span> <span class="o">+</span> <span class="nx">tweet</span><span class="p">.</span><span class="nx">from_user</span> <span class="o">%&gt;&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>                 <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>
</span><span class='line'>                 <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;tail&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                    <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;&lt;%=</span> <span class="nx">tweet</span><span class="p">.</span><span class="nx">text</span> <span class="o">%&gt;&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>                    <span class="o">&lt;</span><span class="nx">p</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;created&quot;</span><span class="o">&gt;&lt;%=</span> <span class="nx">tweet</span><span class="p">.</span><span class="nx">created_at</span> <span class="o">%&gt;&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>                 <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>                 <span class="o">&lt;</span><span class="nx">hr</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'>           <span class="o">&lt;</span><span class="err">/li&gt;  </span>
</span><span class='line'>
</span><span class='line'>          <span class="o">&lt;%</span> <span class="p">});</span> <span class="o">%&gt;</span>
</span><span class='line'>
</span><span class='line'>          <span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/section&gt;</span>
</span><span class='line'>     <span class="c">&lt;!--</span> <span class="o">/</span><span class="nx">List</span> <span class="nx">of</span> <span class="nx">Tweets</span> <span class="o">--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h2>The CSS</h2>

<p><img src="https://dl.dropbox.com/u/10021156/blog/sp.png"></p>

<p>This was a great exercise in learning more about CSS and some of the new CSS3 styles like dropshadow and border-radius. Going forward I’d like to use more style inheritance and eventually use LESS. (Actually, if you convert this CSS to LESS, it will look the exact same.)</p>

<figure class='code'><figcaption><span>The CSS </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'> <span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(&#39;http://dl.dropbox.com/u/10021156/NsLayout/img/white_tiles.png&#39;)</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding-top</span><span class="o">:</span> <span class="m">60px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding-bottom</span><span class="o">:</span> <span class="m">40px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#narrLogo</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">margin-left</span><span class="o">:</span><span class="m">34px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span> <span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#message</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span><span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-left</span><span class="o">:</span><span class="m">152px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-top</span><span class="o">:</span><span class="m">24px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">nav</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span><span class="m">85</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">10px</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background-color</span><span class="o">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">19</span><span class="o">,</span><span class="m">101</span><span class="o">,</span><span class="m">53</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">6</span><span class="p">);</span>
</span><span class='line'>  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span><span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-bottom</span><span class="o">:</span><span class="m">47px</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#logo</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span><span class="m">50</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">0px</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#tweetList</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">list-style</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.hero-unit</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background-color</span><span class="o">:</span><span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">1</span><span class="p">);</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span><span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span><span class="m">20px</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.reverse</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">float</span><span class="o">:</span><span class="k">right</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.container-fluid</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">margin-left</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-right</span><span class="o">:</span><span class="k">auto</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span><span class="m">600px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.head</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span><span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span><span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span><span class="m">5px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background-color</span><span class="o">:</span><span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">1</span><span class="p">);</span>
</span><span class='line'>  <span class="k">opacity</span><span class="o">:</span><span class="m">0</span><span class="o">.</span><span class="m">9</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">i</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background-position</span> <span class="o">:</span> <span class="m">-435px</span> <span class="m">-119px</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">img</span><span class="nc">.pic</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="m">6px</span> <span class="m">8px</span> <span class="m">8px</span> <span class="m">#888</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span><span class="m">60px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span><span class="m">60px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.tail</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span><span class="m">2px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.userId</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.created</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span><span class="m">14px</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-weight</span><span class="o">:</span><span class="k">bold</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-top</span><span class="o">:-</span><span class="m">13px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span><span class="nb">white</span><span class="p">;</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span><span class="m">5px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">0px</span> <span class="m">3px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-left</span><span class="o">:</span> <span class="m">14px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">opacity</span><span class="o">:</span><span class="m">0</span><span class="o">.</span><span class="m">9</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.userId</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">margin-left</span><span class="o">:</span><span class="m">10px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The Model</h2>

<figure class='code'><figcaption><span>Backbone.js Model </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Tweet</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well that was easy. We can define our Tweets field names and default values by passing in a defaults object into the extend() method of the Model class. But since this is JavaScript we can add properties on the fly and default values would not make sense for the properties in this example.</p>

<h2>The View</h2>

<p>On initialize the view will call fetch on our collection of tweets which will use the sync method to initiate an ajax call to Twitter’s API.
The resulting data will then be passed through the parse method, into the render method, and applied to the template. It’s best to look at the View while looking at the Collection code. (see below).</p>

<figure class='code'><figcaption><span>Backbone.js View </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="nx">TweetsView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">_</span><span class="p">.</span><span class="nx">bindAll</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;render&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// create a collection</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">collection</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Tweets</span><span class="p">;</span>
</span><span class='line'>           <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;reset&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Fetch the collection and call render() method</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">fetch</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;fetched&quot;</span><span class="p">,</span> <span class="nx">s</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">that</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">el</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#tweetContainer&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="c1">// Use an external template</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">template</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#tweettemplate&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">()),</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Fill the html with the template and the collection</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">({</span> <span class="nx">tweets</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()</span> <span class="p">}));</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">events</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;click .refresh&#39;</span> <span class="o">:</span> <span class="s1">&#39;refresh&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;click .reverse&#39;</span> <span class="o">:</span> <span class="s1">&#39;reverse&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">refresh</span> <span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">fetch</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;refresh&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">);</span>
</span><span class='line'>     <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">reverse</span> <span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">reverse</span><span class="p">();</span>
</span><span class='line'>       <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">reverse</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TweetsView</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The Collection</h2>

<p>Here reverse will override our comparator to display tweets in reverse order by way of the ternary operator provided to us in JavaScript.</p>

<figure class='code'><figcaption><span>Backbone.js Collection </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Tweets</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">model</span><span class="o">:</span> <span class="nx">Tweet</span><span class="p">,</span>
</span><span class='line'>        <span class="c1">// Url to request when fetch() is called</span>
</span><span class='line'>        <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://search.twitter.com/search.json?q=claritycon&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">initialize</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">sort_order</span> <span class="o">=</span> <span class="s1">&#39;desc&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">parse</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//modify dates to be more readable</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">results</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">val</span><span class="p">.</span><span class="nx">created_at</span> <span class="o">=</span> <span class="nx">val</span><span class="p">.</span><span class="nx">created_at</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">val</span><span class="p">.</span><span class="nx">created_at</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>              <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">results</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="c1">// Overwrite the sync method to pass over the Same Origin Policy</span>
</span><span class='line'>        <span class="nx">sync</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>                    <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;jsonp&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">url</span><span class="o">:</span> <span class="nx">that</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">processData</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>                <span class="p">},</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span><span class="nx">params</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">comparator</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">activity</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;this is comparing&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">activity</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;created_at&#39;</span><span class="p">));</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">sort_order</span> <span class="o">==</span> <span class="s1">&#39;desc&#39;</span>
</span><span class='line'>                 <span class="o">?</span> <span class="o">-</span><span class="nx">date</span><span class="p">.</span><span class="nx">getTime</span><span class="p">()</span>
</span><span class='line'>                 <span class="o">:</span>  <span class="nx">date</span><span class="p">.</span><span class="nx">getTime</span><span class="p">()</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">reverse</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;this is reversing&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">sort_order</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">sort_order</span> <span class="o">==</span> <span class="s1">&#39;desc&#39;</span> <span class="o">?</span> <span class="s1">&#39;asc&#39;</span> <span class="o">:</span> <span class="s1">&#39;desc&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">sort</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h2>Refresh and Reverse</h2>

<p>When refresh is clicked you can watch the ajax call in Chrome tools.</p>

<p><img src="https://dl.dropbox.com/u/10021156/blog/tweeter.png"></p>

<h2>A note about Twitter’s APIs</h2>

<p><img src="https://dl.dropbox.com/u/10021156/blog/twitter.png"></p>

<p>The twitter API comes in 1 of 3 flavors. For our example we will use the search API which will allow us to retrieve tweets in jsonp (json with “padding”) and parse them on the client. It’s important to note that we are making a cross-domain request so we have to use jsonp to avoid the “same-origin policy” issue. One thing to also note, the search API only allows for 150 requests per hour per client and is limited in the amount of tweets that can be retrieved as well as historically how far back you can dig up tweets.</p>

<h2>Git it</h2>

<p><img src="https://dl.dropbox.com/u/10021156/blog/git.png"></p>

<p>Probably the simplest and easiest commands you will use when deploying your site to a hosting provider like github, heroku, appharbor. Just remember these few simple commands and you will be able to upload any app anywhere.</p>

<figure class='code'><figcaption><span>Git goodness </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git init //initializes the repo
</span><span class='line'>git add . //adds all files in the current directory to the repo’s changeset
</span><span class='line'>git commit -m “First Commit” //commits all the changes to the repo
</span><span class='line'>git remote add github git@github.com:<span class="o">(</span>username<span class="o">)</span>/<span class="o">(</span>reponame<span class="o">)</span>.git
</span><span class='line'>git push github master
</span><span class='line'>You can now import your github repo into www.c9.io and deploy it to cloud foundry.
</span></code></pre></td></tr></table></div></figure>


<p>Get the source here: <iframe src="http://ghbtns.com/github-btn.html?user=djohnsonm&repo=Twitter-Feed&type=fork&count=true"
  allowtransparency="true" frameborder="0" scrolling="0" width="95px" height="20px"></iframe></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with F#]]></title>
    <link href="http://davidmjohnson.me/blog/2011/08/11/getting-started-with-f-number/"/>
    <updated>2011-08-11T15:38:00-05:00</updated>
    <id>http://davidmjohnson.me/blog/2011/08/11/getting-started-with-f-number</id>
    <content type="html"><![CDATA[<h2>What is F#?</h2>

<p>F# is a multi-paradigm programming language combining functional, OOP and imperative styles. It is based on the ML variant of languages and is most closely related to OCaml. It is a strongly-typed language that utilizes type inference to resolve data-types at runtime. With the release of Visual Studio 2010, F# is now a first class citizen of the .NET Platform and fully compatible with most .NET libraries (including but not limited to WCF, WPF, XNA). F# is a great example of a specific type of programming called “functional programming.” The functional programming genre seeks to describe more of the “what” and less of the “how” in regards to programming. C# is slowly including more functional aspects into it overtime.</p>

<h2>Origins</h2>

<p>Most people don’t know this but C# actually owes a lot to F#. Don Syme, the originator of F#, was responsible for creating the concept of Generics in C# and also spent time working on LINQ. These features tend to be more functional in nature. Generics allow us to see code as data and LINQ is a very declarative way to retrieve and modify data from a variety of sources.</p>

<h2>Predictions</h2>

<p>General consensus about functional languages like F# is that they are primarily reserved for the halls of academia (i.e. LISP) but all that is about to change. As demand for multi-core and asynchronous computing increases the future of F# seems bright.</p>

<h2>Why should you care?</h2>

<blockquote><p>“Today we are facing new challenges and trends that open the door to functional languages. There has never been a better time to learn them. We need to write programs that process large sets of data and scale to a large number of processors or computers. We want to write programs that can be easily tested. We want to be able to express our logic in a declarative way which expresses results without explicitly specifying execution details–making the code easier to understand and reason about. All of these trends are embodied in functional programming…</p><footer><strong>Jon Skeet and Tomas Petricek</strong> <cite>Real World Functional Programming</cite></footer></blockquote>


<h2>What F# isn’t</h2>

<p>A replacement for C#. While both are very effective langauages in their respective domains and both can overlap in regards to functional and OOP aspects (as well as intermingle via interoperability), C# will most-likely be the first candidate for line-of-business applications due to its adoption levels, performance and pervasiveness in the market. Personally, I believe that F# will be important going forward given the convergence of a few market factors such as data growth, multi-core computing and the desire for elegance in code. Concurrent applications are harder to maintain in a pure object-oriented environment. Race conditions and dealing with thread locking can become very tedious as applications are expected to scale to meet market demand. The functional paradigm does not need to manage state and provides no “side effects”, thus making it much easier to scale applications across multiple cores.</p>

<h2>Who’s using F#?</h2>

<p>-Financial Services
–Algorithmic Trading
-Statistical analysis
-Application Development
-Web Development</p>

<h2>How Do I Get Started?</h2>

<p>I’ll go through some of the basics of F# in this lesson and provide follow-ups to links and books at the end. Let’s get started with our first example in F#, but before we can do that we need to set up our development environment. In Visual Studio it is possible to create a new F# project by hitting “Ctrl-Shift-N” and creating a F# Console Application.
But for our purposes we will just use F# interactive which is a stand-alone command line utility. Great for rapid prototyping and learning the language. So navigate to (C:\Program Files (x86)\Microsoft F#\v4.0\fsi.exe). (Aside: You have to right-click the toolbar and select “paste” in order to insert code).</p>

<figure class='code'><figcaption><span>Simple Multiplication Function  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">multiply</span> <span class="n">x</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function might seem ridiculous at first glance (it did for me), especially if you’re coming from a pure C# background, but let’s translate it to C# and see if it makes anymore sense.</p>

<figure class='code'><figcaption><span>Simple Multiplication Function in C#  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">int</span> <span class="nf">multiply</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">x</span> <span class="p">*</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//or</span>
</span><span class='line'><span class="n">Func</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">multiply</span> <span class="p">=</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="n">x</span> <span class="p">*</span> <span class="n">y</span><span class="p">;</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Let</h2>

<p>The &#8220;Let&#8221; keyword might be familiar for those who have worked with LINQ. It might be tempting to think that this keyword is used for assignment. Think of it more as binding to a value rather than assigning a value. Since functions are first class citizens in F# and they can be passed around as parameters and contain return values.</p>

<h2>Val</h2>

<p>The “val multiply: int -> int -> int” can be thought of as: A function named “multiply” that takes an integer as a parameter returns a function that takes an integer as a parameter and outputs an integer. Confusing you say? Yes, absolutely. Why didn’t I just say: “A function that takes in two ints and returns and int.” Because of currying.</p>

<h2>Spicy Curry</h2>

<p>There is something called “currying” in F# that you should be wary of. Currying is the process of partial function application. This allows us to specify only one parameter of a function to receive a function that takes in the other parameter. Here is an example in code:</p>

<figure class='code'><figcaption><span>Curried Multiplication Function in F#  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">&gt;</span> <span class="k">let</span> <span class="n">multiply</span> <span class="n">x</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span><span class="o">;;</span>
</span><span class='line'><span class="k">val</span> <span class="n">multiply</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">-&gt;</span> <span class="kt">int</span> <span class="o">-&gt;</span> <span class="kt">int</span>
</span><span class='line'><span class="o">&gt;</span> <span class="k">let</span> <span class="n">curriedMultiplyX</span> <span class="o">=</span> <span class="n">x</span> <span class="mi">5</span><span class="o">;;</span>
</span><span class='line'><span class="k">val</span> <span class="n">curriedMultiplyX</span> <span class="o">:</span> <span class="o">(</span><span class="kt">int</span> <span class="o">-&gt;</span> <span class="kt">int</span><span class="o">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">curriedMultiplyX</span> <span class="mi">7</span><span class="o">;;</span>
</span><span class='line'><span class="k">val</span> <span class="n">it</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">=</span> <span class="mi">12</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">curriedMultiplyX</span> <span class="mi">9</span><span class="o">;;</span>
</span><span class='line'><span class="k">val</span> <span class="n">it</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">=</span> <span class="mi">14</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice how I only specify one parameter for the function named “x”? “x 5″ is saying that I want to return a function that is based on the function named “x” but applies the number 5 as a parameter every time basically.</p>

<h2>Visualization</h2>

<p>F# can also be utilized for visualiztion. Below is a Windows forms example. Copy and paste it into your F# interactive console.</p>

<h2>Windows Forms Example</h2>

<p>In F# Interactive write the following code:</p>

<figure class='code'><figcaption><span>F# Windows Forms Example  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Windows</span><span class="p">.</span><span class="nc">Forms</span>
</span><span class='line'><span class="k">let</span> <span class="n">form</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Form</span><span class="o">(</span><span class="nc">Text</span><span class="o">=</span><span class="s2">&quot;Welcome to F# Win Form Style&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">label</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Label</span><span class="o">(</span><span class="nc">Text</span> <span class="o">=</span> <span class="s2">&quot;This is a label!&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">form</span><span class="o">.</span><span class="nn">Controls</span><span class="p">.</span><span class="nc">Add</span><span class="o">(</span><span class="n">label</span><span class="o">)</span>
</span><span class='line'><span class="n">form</span><span class="o">.</span><span class="nc">Show</span><span class="bp">()</span><span class="o">;;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see it’s pretty easy to prototype in F# using the interactive console.
<img src="https://dl.dropbox.com/u/10021156/FViz1.png"></p>

<figure class='code'><figcaption><span>Recursive Factorial Function in F#  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">fac</span> <span class="n">param</span> <span class="o">=</span> <span class="k">if</span> <span class="n">param</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="k">then</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="k">else</span> <span class="n">param</span> <span class="o">*</span> <span class="n">fac</span><span class="o">(</span><span class="n">param</span> <span class="o">-</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">);;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code calculates the factorial of any number passed in using familiar “if..then” logic. Also, if you are getting strange results, remember that indentation matters in F#, but its really doesn’t inhibit your productivity.</p>

<figure class='code'><figcaption><span>Recursive Factorial Function with Pattern Matching in F#  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="o">(!)</span> <span class="n">x</span> <span class="o">=</span>
</span><span class='line'><span class="o">|</span> <span class="mi">0</span> <span class="o">-&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="o">|</span> <span class="o">_</span> <span class="o">&gt;</span> <span class="n">n</span> <span class="o">*</span> <span class="n">factorial</span> <span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code should be pretty self-explanatory. The “rec” prefix means that this function is recursive. The (!) means that the name of this function is “!” (this is not operator overloading but a way to bind symbols to function names). The underscore value (“_”) is used as a placeholder variable for every possible value of n. The pipes are kind of like a switch statement on steroids. The value will navigate down the pipes and return the value “1″ if n is “0″ or “n-1″ for everything else and then multiply by the return value recursively.</p>

<p>Asychronous and Concurrent Programming using CPU bound operations.</p>

<p>Now for the fun stuff.
So let’s take our little factorial example see if we can calculate the factorial of every number from 0 to 51,000 utilizing Parallel Computing. Here’s the code for that. WARNING: If you don’t have a lot of memory then bring it down from 51,000 to something more manageable.</p>

<figure class='code'><figcaption><span>Async and Parallel Factorial Function  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c">(* Declare our function *)</span>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">fac</span> <span class="n">param</span> <span class="o">=</span> <span class="k">if</span> <span class="n">param</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="k">then</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="k">else</span> <span class="n">param</span> <span class="o">*</span> <span class="n">fac</span><span class="o">(</span><span class="n">param</span> <span class="o">-</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">);;</span>
</span><span class='line'><span class="c">(* Asynchronous Example *)</span>
</span><span class='line'><span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Parallel</span> <span class="o">[</span><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">..</span><span class="mi">51000</span><span class="o">.</span><span class="mi">0</span> <span class="o">-&gt;</span> <span class="n">async</span> <span class="o">{</span> <span class="k">return</span> <span class="n">fac</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">}]</span> <span class="o">|&gt;</span> <span class="nn">Run</span><span class="p">.</span><span class="nc">Synchronously</span><span class="o">;;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I’ll perform the operation on an 8-Core machine with Diagnostics so we can visualize the processor usage better.</p>

<p><img src="https://dl.dropbox.com/u/10021156/blog/8CoreSynch1-1024x121.png"></p>

<figure class='code'><figcaption><span>Simple Computation Results (Synchronous, non-Parallel) – 41 seconds  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Diagnostics</span>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">fac</span> <span class="n">x</span> <span class="o">=</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="k">then</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="k">else</span> <span class="n">x</span> <span class="o">*</span> <span class="n">fac</span><span class="o">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">watch</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stopwatch</span><span class="bp">()</span>
</span><span class='line'><span class="n">watch</span><span class="o">.</span><span class="nc">Start</span><span class="bp">()</span>
</span><span class='line'><span class="k">let</span> <span class="n">simpleComputation</span> <span class="o">=</span> <span class="o">[</span><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">..</span><span class="mi">51000</span><span class="o">.</span><span class="mi">0</span> <span class="o">-&gt;</span> <span class="n">fac</span><span class="o">(</span><span class="n">i</span><span class="o">)]</span>
</span><span class='line'><span class="n">watch</span><span class="o">.</span><span class="nc">Stop</span><span class="bp">()</span>
</span><span class='line'><span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">watch</span><span class="o">.</span><span class="nn">Elapsed</span><span class="p">.</span><span class="nn">Seconds</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span>
</span><span class='line'><span class="n">printfn</span> <span class="s2">&quot;%s&quot;</span> <span class="n">result</span><span class="o">;;</span>
</span><span class='line'>
</span><span class='line'><span class="c">(* RESULTS *)</span>
</span><span class='line'><span class="k">val</span> <span class="n">fac</span> <span class="o">:</span> <span class="kt">float</span> <span class="o">-&gt;</span> <span class="kt">float</span>
</span><span class='line'><span class="k">val</span> <span class="n">watch</span> <span class="o">:</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Diagnostics</span><span class="p">.</span><span class="nc">Stopwatch</span>
</span><span class='line'><span class="k">val</span> <span class="n">simpleComputation</span> <span class="o">:</span> <span class="kt">float</span> <span class="kt">list</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">6</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">24</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">120</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">720</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">5040</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">40320</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">362880</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span>
</span><span class='line'>   <span class="mi">3628800</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">39916800</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">479001600</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">6227020800</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">8</span><span class="o">.</span><span class="mi">71782912</span><span class="n">e</span><span class="o">+</span><span class="mi">10</span><span class="o">;</span>
</span><span class='line'>   <span class="mi">1</span><span class="o">.</span><span class="mi">307674368</span><span class="n">e</span><span class="o">+</span><span class="mi">12</span><span class="o">;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">092278989</span><span class="n">e</span><span class="o">+</span><span class="mi">13</span><span class="o">;</span> <span class="mi">3</span><span class="o">.</span><span class="mi">556874281</span><span class="n">e</span><span class="o">+</span><span class="mi">14</span><span class="o">;</span> <span class="mi">6</span><span class="o">.</span><span class="mi">402373706</span><span class="n">e</span><span class="o">+</span><span class="mi">15</span><span class="o">;...]</span>
</span><span class='line'><span class="k">val</span> <span class="n">result</span> <span class="o">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="s2">&quot;41&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://dl.dropbox.com/u/10021156/blog/8CoreAsynParallel-1024x124.png"></p>

<figure class='code'><figcaption><span>Complex Computation Results (Asychronous, Parallel) – 13 seconds  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Diagnostics</span>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">fac</span> <span class="n">x</span> <span class="o">=</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="k">then</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="k">else</span> <span class="n">x</span> <span class="o">*</span> <span class="n">fac</span><span class="o">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">watch</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stopwatch</span><span class="bp">()</span>
</span><span class='line'><span class="n">watch</span><span class="o">.</span><span class="nc">Start</span><span class="bp">()</span>
</span><span class='line'><span class="k">let</span> <span class="n">complexComputation</span> <span class="o">=</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Parallel</span> <span class="o">[</span><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">..</span><span class="mi">51000</span><span class="o">.</span><span class="mi">0</span> <span class="o">-&gt;</span> <span class="n">async</span> <span class="o">{</span> <span class="k">return</span> <span class="n">fac</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">}]</span> <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">RunSynchronously</span><span class="o">;;</span>
</span><span class='line'><span class="n">watch</span><span class="o">.</span><span class="nc">Stop</span><span class="bp">()</span>
</span><span class='line'><span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">watch</span><span class="o">.</span><span class="nn">Elapsed</span><span class="p">.</span><span class="nn">Seconds</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span>
</span><span class='line'><span class="n">printfn</span> <span class="s2">&quot;%s&quot;</span> <span class="n">result</span><span class="o">;;</span>
</span><span class='line'>
</span><span class='line'><span class="c">(* RESULTS *)</span>
</span><span class='line'><span class="k">val</span> <span class="n">fac</span> <span class="o">:</span> <span class="kt">float</span> <span class="o">-&gt;</span> <span class="kt">float</span>
</span><span class='line'><span class="k">val</span> <span class="n">watch</span> <span class="o">:</span> <span class="nc">Stopwatch</span>
</span><span class='line'><span class="k">val</span> <span class="n">complexComputation</span> <span class="o">:</span> <span class="kt">float</span> <span class="bp">[]</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">[|</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">6</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">24</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">120</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">720</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">5040</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">40320</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">362880</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="mi">3628800</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">39916800</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">479001600</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">6227020800</span><span class="o">.</span><span class="mi">0</span><span class="o">;</span> <span class="mi">8</span><span class="o">.</span><span class="mi">71782912</span><span class="n">e</span><span class="o">+</span><span class="mi">10</span><span class="o">;</span>
</span><span class='line'>    <span class="mi">1</span><span class="o">.</span><span class="mi">307674368</span><span class="n">e</span><span class="o">+</span><span class="mi">12</span><span class="o">;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">092278989</span><span class="n">e</span><span class="o">+</span><span class="mi">13</span><span class="o">;</span> <span class="mi">3</span><span class="o">.</span><span class="mi">556874281</span><span class="n">e</span><span class="o">+</span><span class="mi">14</span><span class="o">;</span> <span class="mi">6</span><span class="o">.</span><span class="mi">402373706</span><span class="n">e</span><span class="o">+</span><span class="mi">15</span><span class="o">;</span>
</span><span class='line'>    <span class="o">...|]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Results: Non-parallel version is 3.15 times slower. Parallel version 315% faster!</p>

<h2>Conclusion</h2>

<p>There are a lot of things to be excited about in F#. Learning F# will definitely make you a better C# programmer by providing you with more of a functional mindset. I think in the future it would be a fair bet to say that more .NET programmers will begin to inter-operate between these two languages.</p>

<h2>Resource Round-Up</h2>

<p><em>Interesting F# project to watch: WebSharper
</em>Check out my F# stock ticker app on my github account. This is a small project that will read information from yahoo’s financial stock history for any given stock, summarize the data using List functions such as “map” and “reduce” and will then output the results to a C# console application. This code was derived from Luca Bolognese’s original talk at PDC on F#. Luca is actually using F# in an algorithmic trading setting now at Credit Suisse.
*Best Getting Started Video Tutorial on F#</p>
]]></content>
  </entry>
  
</feed>
